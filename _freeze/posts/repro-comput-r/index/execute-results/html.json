{
  "hash": "50fc5337ec439b325fbc503273e42a01",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Reproducible R Computing \nsubtitle: A framework for good R practice with RStudio and Quarto\ndescription: \"Reproducibility can be ensured by adhering to (opinionated) standards for project management and data analysis.\"\nauthor: \n    name: G. Bisaccia\n    orcid: 0000-0003-4606-3093\ndate: 2024/04/27\ndate-modified: last-modified\ndate-format: medium\nformat: \n  html:\n    number-sections: true\ndraft: false # change status\nbibliography: references.bib\nreference-location: margin\nimage: \"R-r-R.png\"\ncategories: [quarto, R, data analysis, reproducibility]\nexecute:\n    echo: true\n    eval: false\n    warning: false\n    error: false\n    freeze: auto\n    output: false\n    cache: true\n---\n\n\n\n-   Among best practices in science, aiming for *reproducibility* is primarily important because it ensures methodological rigor and the consistency of findings[@RN643].\n-   I am convinced that reproducibility is best achieved through automation of certain processes and adherence to (opinionated) standards[@RN644].\n-   What follows is a personal project workflow implementing various external tools in an R environment to obtain and maintain reproducibility.\n\nThis guide is aimed at intermediate R users and was developed with Rstudio in mind. Much wider coverage and further resources on reproducible R workflows can be found at [Prof. Harrell's website](https://hbiostat.org/rflow/).\n\n# Install and load ProjectTemplate\n\n## Install ProjectTemplate\n\n[ProjectTemplate](http://projecttemplate.net/index.html) is an R package allowing for automated organization of R projects. It works by creating an opinionated project structure, pre-loading all packages and data sets used, and pre-processing data where needed.\n\nYou can install the package by running\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages('ProjectTemplate')\n```\n:::\n\n\n\n## Load ProjectTemplate\n\nLoad the package and create a new *minimal* project structure:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire('ProjectTemplate')\ncreate.project(project.name = 'projectname',\n               template = 'minimal')\n```\n:::\n\n\n\n::: callout-note\n`create.project()` is the function that takes care of creating the project structure. It needs a `project.name` (or will create the project in a \"new-project\" folder). Optionally, the user can specify a project `template` (currently, options `'full'` and `'minimal'` are available; custom templates are also [supported](http://projecttemplate.net/custom_templates.html)).\n:::\n\n## Choose a useful project name\n\nBe mindful of recommendations for [naming things](https://www2.stat.duke.edu/~rcs46/lectures_2015/01-markdown-git/slides/naming-slides/naming-slides.pdf).\n\n::: callout-note\nGenerally, you want your project (and any files and folders you're working with) to be named consistently, so that any files (loaded or generated) are immediately recognizable. File names (especially for plots, tables, and exported data sets) should often include a date. Names of R scripts (and Quarto reports) should be self-explaining.\n:::\n\n# Open the project in RStudio\n\n1.  Open Rstudio\n2.  Go to *File \\> Open Project...*\n\n# Using your structured project\n\n## Load your project\n\nYou can load the whole project (data, R scripts) with:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nload.project('projectname')\n```\n:::\n\n\n\n-   data sets in `data` will be loaded as data.frames.\n\n    -   ProjectTemplate can load [a bunch of different file formats](http://projecttemplate.net/file_formats.html), including compressed and uncompressed CSV, Excel and RDS.\n\n-   \n\n## Getting to know the project folders\n\nA minimal project structure includes the following folders. Each folder comes with an explanatory README file, but they will be summarized here, in reasonable order:\n\n-   `data/` contains the project's data sets.\n\n    -   Raw data sets should be backed up in multiple locations outside the project.\n\n    -   [Raw data should never be edited or overwritten]{.underline}. This is because you can **never** be sure all edits are respectful of the original data.\n\n-   `munge/` includes scripts for pre-processing the data (e.g. adding custom columns, re-assigning variable classes, etc.).\n\n    -   Pre-processed data should be generated in the `cache` folder.\n\n-   `cache/` includes data sets generated through pre-processing steps.\n\n    -   In this folder, transformed data are placed.\n\n    -   When a data set is available in both `cache/` and `data/`, `load.project()` will only load the *cached* version.\n\n-   `src/` contains R scripts for data analysis.\n\n    -   each script should start with the same line:\n\n\n\n        ::: {.cell}\n        \n        ```{.r .cell-code}\n        library('ProjectTemplate')\n        load.project()\n        ```\n        :::\n\n\n\n    -   any code that's shared between different R scripts should be placed in the `munge` directory instead.\n\n# Version control and collaboration\n\n## Initialize Git repository\n\nAfter creating your project structure, initialize version control immediately:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# In the terminal or Git Bash\ngit init\ngit add .\ngit commit -m \"Initial project structure\"\n```\n:::\n\n\n\n::: callout-note\nVersion control is non-negotiable for reproducible research. It tracks changes, enables collaboration, and provides a safety net for your work.\n:::\n\n## Create a `.gitignore` file\n\nProjectTemplate creates a basic `.gitignore`, but you should expand it:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Data files too large for Git\ndata/*.csv\ndata/*.xlsx\ncache/*\n\n# R temporary files\n.Rhistory\n.RData\n.Rproj.user/\n\n# OS files\n.DS_Store\nThumbs.db\n```\n:::\n\n\n\n# Data management best practices\n\n## Raw data preservation\n\nYour `data/` folder should follow these principles:\n\n1. **Read-only access**: Never modify files in `data/`\n2. **Documentation**: Include a `data/README.md` describing each dataset\n3. **Backup strategy**: Maintain copies in at least two other locations\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example data documentation structure\n# data/README.md\n# Dataset: patient_outcomes.csv\n# Source: Clinical trial NCT12345678\n# Date acquired: 2024-04-15\n# Variables: 25 columns, see codebook.xlsx\n# N observations: 1,250\n```\n:::\n\n\n\n## Data preprocessing workflow\n\nCreate numbered scripts in `munge/` to ensure correct execution order:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# munge/01-clean-data.R\n# Remove duplicates and handle missing values\ndf_clean <- df_raw %>%\n  distinct() %>%\n  filter(!is.na(primary_outcome))\n\n# munge/02-transform-variables.R\n# Create derived variables\ndf_clean <- df_clean %>%\n  mutate(\n    age_group = cut(age, \n                    breaks = c(0, 40, 60, Inf),\n                    labels = c(\"Young\", \"Middle\", \"Older\"))\n  )\n```\n:::\n\n\n\n# Analysis and reporting\n\n## Organizing analysis scripts\n\nStructure your `src/` folder by analysis type:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# src/01-descriptive-statistics.R\n# src/02-primary-analysis.R\n# src/03-sensitivity-analysis.R\n# src/04-figures-tables.R\n```\n:::\n\n\n\n::: callout-note\nNumber your scripts to indicate execution order. This helps collaborators understand your analytical flow.\n:::\n\n## Integrating Quarto documents\n\nFor reproducible reports, create a `reports/` folder:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create reports directory\ndir.create(\"reports\")\n\n# reports/main-analysis.qmd\n# reports/supplementary-material.qmd\n```\n:::\n\n\n\nYour Quarto documents should source the analysis scripts:\n\n\n\n\n\n\n\n# Advanced reproducibility features\n\n## Package management with `renv`\n\nEnsure consistent package versions across environments:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Initialize renv for the project\ninstall.packages(\"renv\")\nrenv::init()\n\n# Snapshot current package versions\nrenv::snapshot()\n```\n:::\n\n\n\n## Automated testing\n\nCreate a `tests/` folder for unit tests:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# tests/test-data-integrity.R\nlibrary(testthat)\n\ntest_that(\"No missing values in key variables\", {\n  load.project()\n  expect_true(all(!is.na(df_clean$primary_outcome)))\n  expect_true(all(!is.na(df_clean$treatment_group)))\n})\n```\n:::\n\n\n\n## Configuration management\n\nModify `config/global.dcf` for project-specific settings:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# config/global.dcf\ndata_loading: TRUE\ndata_loading_header: TRUE\ndata_ignore: \"\"\ncache_loading: TRUE\nrecursive_loading: FALSE\nmunging: TRUE\nlogging: FALSE\nlogging_level: INFO\nload_libraries: TRUE\nlibraries: tidyverse, ggplot2, survival\nas_factors: FALSE\ntables_type: tibble\nattach_internal_libraries: FALSE\ncache_loaded_data: TRUE\nsticky_variables: NONE\n```\n:::\n\n\n\n# Best practices for collaboration\n\n## Documentation standards\n\nEvery project should include:\n\n1. **README.md**: Project overview and setup instructions\n2. **CONTRIBUTING.md**: Guidelines for collaborators\n3. **CHANGELOG.md**: Track major changes\n4. **requirements.txt**: System dependencies\n\n## Code style consistency\n\nAdopt a style guide (e.g., tidyverse style) and enforce it:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use styler package for automatic formatting\ninstall.packages(\"styler\")\nstyler::style_dir(\"src/\")\nstyler::style_dir(\"munge/\")\n```\n:::\n\n\n\n# Troubleshooting common issues\n\n## Memory management\n\nFor large datasets:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use data.table for efficient memory usage\nlibraries: data.table, tidyverse\n\n# In munge scripts, clean up intermediate objects\nrm(temp_df)\ngc()\n```\n:::\n\n\n\n## Path management\n\nAlways use relative paths:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Good\nread_csv(\"data/patient_outcomes.csv\")\n\n# Bad\nread_csv(\"/Users/username/projects/projectname/data/patient_outcomes.csv\")\n```\n:::\n\n\n\n::: callout-warning\nAbsolute paths break reproducibility across different systems. ProjectTemplate's structure ensures relative paths work consistently.\n:::\n\n# Conclusion\n\nThis workflow combines ProjectTemplate's organizational structure with modern reproducibility tools. The key principles are:\n\n- **Separation of concerns**: Data, preprocessing, analysis, and reporting in distinct folders\n- **Version control**: Track all changes with Git\n- **Environment management**: Use `renv` for package versioning\n- **Documentation**: Comprehensive documentation at every level\n- **Automation**: Let tools handle repetitive tasks\n\nBy following these practices, your R projects will be more maintainable, shareable, and—most importantly—reproducible.\n\n## Further resources\n\n- [The Turing Way](https://the-turing-way.netlify.app/): Community handbook for reproducible research\n- [R for Data Science](https://r4ds.had.co.nz/): Modern R workflows\n- [Happy Git with R](https://happygitwithr.com/): Version control for R users",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}